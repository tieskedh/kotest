(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{134:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=p(n),d=a,h=b["".concat(i,".").concat(d)]||b[d]||u[d]||o;return n?r.a.createElement(h,s(s({ref:t},c),{},{components:n})):r.a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},59:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),o=(n(0),n(134)),i={id:"index",title:"Property-based Testing",slug:"property-based-testing.html"},s={unversionedId:"proptest/index",id:"proptest/index",isDocsHomePage:!1,title:"Property-based Testing",description:"Kotest is split into several subprojects which can be used independently. One of these subprojects is the property test framework.",source:"@site/docs/proptest/index.md",slug:"/proptest/property-based-testing.html",permalink:"/docs/proptest/property-based-testing.html",editUrl:"https://github.com/kotest/kotest/docs/proptest/index.md",version:"current",sidebar:"proptest",next:{title:"Generators",permalink:"/docs/proptest/property-test-generators.html"}},l=[{value:"Quick Start",id:"quick-start",children:[]},{value:"Introduction To Property Testing",id:"introduction-to-property-testing",children:[{value:"Iterations",id:"iterations",children:[]}]},{value:"Generators",id:"generators",children:[{value:"Arb",id:"arb",children:[]},{value:"Exhaustive",id:"exhaustive",children:[]},{value:"Specifying Generators",id:"specifying-generators",children:[]}]}],c={rightToc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Kotest is split into several subprojects which can be used independently. One of these subprojects is the property test framework."),Object(o.b)("h2",{id:"quick-start"},"Quick Start"),Object(o.b)("p",null,"To use Kotest's property-based testing you need to add the module ",Object(o.b)("inlineCode",{parentName:"p"},"io.kotest:kotest-property:<version>")," to your build."),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://search.maven.org/search?q=kotest"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/maven-central/v/io.kotest/kotest-property.svg?label=release",alt:"version badge"}))),"\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://oss.sonatype.org/content/repositories/snapshots/io/kotest"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/io.kotest/kotest-framework-engine.svg?label=snapshot",alt:"version badge"})))),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},Object(o.b)("em",{parentName:"p"},"Upgrading from 3.x?")," The ",Object(o.b)("inlineCode",{parentName:"p"},"kotest-property")," module is only available in version 4.0+.\nIt replaced the previous property test classes which were deprecated in 4.0 and removed in 4.2."))),Object(o.b)("h2",{id:"introduction-to-property-testing"},"Introduction To Property Testing"),Object(o.b)("p",null,"Developers typically write example-based tests. These are your garden variety unit tests you know and love.\nYou provide the inputs and the expected values, and a test framework like Kotest checks that the two align, failing the build if they don't match up."),Object(o.b)("p",null,"One problem with this approach is that it is very easy to miss errors due to edge cases or lack of coverage in the chosen inputs.\nWith property testing, hundreds or thousands of values are fed into the same test, and the values are randomly generated by your property test framework."),Object(o.b)("p",null,"A good property test framework will include things like negative infinity, empty lists, strings with non-ascii characters, and so on.\nThings we often forget about when writing example based tests."),Object(o.b)("p",null,"Property tests were originally conceived in frameworks like Quickcheck with the notion of testing a ",Object(o.b)("em",{parentName:"p"},"property")," on some object, something that should hold true for all inputs.\nAn example is the length of string A plus the length of string B should always be equal to the length of A + B."),Object(o.b)("p",null,"This is where the term ",Object(o.b)("em",{parentName:"p"},"property")," testing originates."),Object(o.b)("p",null,"Kotest supports this through the ",Object(o.b)("inlineCode",{parentName:"p"},"io.kotest.property.forAll")," function which accepts an n-arity function ",Object(o.b)("inlineCode",{parentName:"p"},"(a, ..., n) -> Boolean")," that tests the property."),Object(o.b)("p",null,"For example, here is the property test that we mentioned just a few paragraphs ago. It checks that for any two Strings, the length of ",Object(o.b)("inlineCode",{parentName:"p"},"a + b"),"\nis the same as the length of ",Object(o.b)("inlineCode",{parentName:"p"},"a")," plus the length of ",Object(o.b)("inlineCode",{parentName:"p"},"b"),". In this example Kotest would\nexecute the test 1000 times for random String combinations."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'class PropertyExample: StringSpec({\n   "String size" {\n      forAll<String, String> { a, b ->\n         (a + b).length == a.length + b.length\n      }\n   }\n})\n')),Object(o.b)("p",null,"Notice that the function must evaluate to a boolean value. We provide the type parameters to ",Object(o.b)("inlineCode",{parentName:"p"},"forAll")," so the framework knows which type of values to generate (in this case strings)."),Object(o.b)("p",null,"If we don't want to provide a property that returns a boolean, Kotest also provides for ",Object(o.b)("inlineCode",{parentName:"p"},"io.kotest.property.checkAll")," which accepts an n-arity function ",Object(o.b)("inlineCode",{parentName:"p"},"(a, ..., n) -> Unit")," in which you can simply execute assertions against the inputs. For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'class PropertyExample: StringSpec({\n   "integers under addition should have an identity value" {\n      checkAll<Int, Int, Int> { a, b, c ->\n         a + 0 shouldbe a\n         0 + a shouldBe a\n      }\n   }\n})\n')),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"checkAll")," approach will consider a test valid if no exceptions were thrown."),Object(o.b)("h3",{id:"iterations"},"Iterations"),Object(o.b)("p",null,"By default, Kotest will run the property test 1000 times. We can easily customize this by specifying the iteration count\nwhen invoking the test method."),Object(o.b)("p",null,"Let's say we want to run a test 10,000 times."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'class PropertyExample: StringSpec({\n   "some test" {\n      checkAll<Double, Double>(10000) { a, b ->\n         // test here\n      }\n   }\n})\n')),Object(o.b)("h2",{id:"generators"},"Generators"),Object(o.b)("p",null,"Generated values are provided by instances of the sealed class ",Object(o.b)("inlineCode",{parentName:"p"},"Gen"),". You can think of a ",Object(o.b)("inlineCode",{parentName:"p"},"Gen")," as kind of like an input stream but for property testing.\nEach Gen will provide a (usually) infinite stream of these values."),Object(o.b)("p",null,"Kotest has two types of generators - ",Object(o.b)("inlineCode",{parentName:"p"},"Arb")," for arbitrary (random) values and ",Object(o.b)("inlineCode",{parentName:"p"},"Exhaustive")," for a finite set of values in a closed space."),Object(o.b)("p",null,"Both types of gens can be mixed and matched in property tests. For example,\nyou could test a function with 100 random positive integers (arbitrary) alongside every\neven number from 0 to 200 (exhaustive)."),Object(o.b)("p",null,"Some generators are only available on the JVM. See the full list ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/proptest/property-test-generators.html"}),"here"),"."),Object(o.b)("h3",{id:"arb"},"Arb"),Object(o.b)("p",null,"Arbs generate random values across a given space. The values may be repeated, and some values may never be generated at all.\nFor example generating 1000 random integers between 0 and Int.MAX will clearly not return all possible values,\nand some values may happen to be generated more than once."),Object(o.b)("p",null,"An arb will generate an infinite stream of values."),Object(o.b)("p",null,"Typical arbs include numbers across a wide number line, strings in the unicode set, random lists, random data classes, emails, codepoint and chars."),Object(o.b)("h3",{id:"exhaustive"},"Exhaustive"),Object(o.b)("p",null,"Exhaustives generate all values from a given space. This is useful when you want to ensure every\nvalue in that space is used. For instance for enum values, it is usually more helpful to ensure each\nenum is used, rather than picking randomly from the enums values and potentially missing some and duplicating others."),Object(o.b)("p",null,"Typical exhaustives include small collections, enums, boolean values, powerset of a list or set, pre-defined small integer ranges, and predefined string ranges."),Object(o.b)("h3",{id:"specifying-generators"},"Specifying Generators"),Object(o.b)("p",null,"You saw earlier when using ",Object(o.b)("inlineCode",{parentName:"p"},"forAll")," or ",Object(o.b)("inlineCode",{parentName:"p"},"checkAll")," that if we specify the type parameters, Kotest will provide an appropriate gen.\nThis is fine for basic tests but often we want more control over the sample space."),Object(o.b)("p",null,"To do this, we can instantiate the generators ourselves by using extension functions on ",Object(o.b)("inlineCode",{parentName:"p"},"Arb")," and/or ",Object(o.b)("inlineCode",{parentName:"p"},"Exhaustive")," and passing\nthose into the assert/check methods."),Object(o.b)("p",null,"For example, we may want to test a function for numbers in a certain range only."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'class PropertyExample: StringSpec({\n    "is allowed to drink in Chicago" {\n        forAll(Arb.int(21..150)) { a ->\n            isDrinkingAge(a) // assuming some function that calculates if we\'re old enough to drink\n        }\n    }\n    "is allowed to drink in London" {\n        forAll(Arb.int(18..150)) { a ->\n            isDrinkingAge(a) // assuming some function that calculates if we\'re old enough to drink\n        }\n    }\n})\n')),Object(o.b)("p",null,"Actually, ages are a small space, it would probably be better not to leave the values to chance."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'class PropertyExample: StringSpec({\n    "is allowed to drink in Chicago" {\n        forAll(Exhaustive.int(21..150)) { a ->\n            isDrinkingAge(a) // assuming some function that calculates if we\'re old enough to drink\n        }\n    }\n    "is allowed to drink in London" {\n        forAll(Exhaustive.int(18..150)) { a ->\n            isDrinkingAge(a) // assuming some function that calculates if we\'re old enough to drink\n        }\n    }\n})\n')),Object(o.b)("p",null,"You can mix and match arbs and exhaustives in the same test of course, since they are both generators."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'class PropertyExample: StringSpec({\n    "some dummy test" {\n        checkAll(Arb.emails(), Exhaustive.enum<Foo>) { email, foo ->\n           // test here\n        }\n    }\n})\n')),Object(o.b)("p",null,"See ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/proptest/property-test-generators.html"}),"here")," for a list of the built in generators."))}p.isMDXComponent=!0}}]);