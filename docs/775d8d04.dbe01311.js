(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{134:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var o=n(0),i=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=p(n),d=o,m=b["".concat(r,".").concat(d)]||b[d]||u[d]||a;return n?i.a.createElement(m,s(s({ref:t},c),{},{components:n})):i.a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var c=2;c<a;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var o=n(3),i=n(7),a=(n(0),n(134)),r={title:"Extensions",slug:"extensions.html"},s={unversionedId:"framework/extensions",id:"framework/extensions",isDocsHomePage:!1,title:"Extensions",description:"Kotest integrates with many libraries and frameworks. This page outlines the extensions maintained by the Kotest team.",source:"@site/docs/framework/extensions.md",slug:"/framework/extensions.html",permalink:"/docs/framework/extensions.html",editUrl:"https://github.com/kotest/kotest/docs/framework/extensions.md",version:"current",sidebar:"framework",previous:{title:"Listeners",permalink:"/docs/framework/listeners.html"},next:{title:"Mocking and Kotest",permalink:"/docs/framework/mocking.html"}},l=[{value:"Allure",id:"allure",children:[]},{value:"Spring",id:"spring",children:[{value:"Field Injection",id:"field-injection",children:[]},{value:"Constructor Injection",id:"constructor-injection",children:[]},{value:"Final Clases",id:"final-clases",children:[]}]},{value:"Ktor",id:"ktor",children:[]},{value:"Koin",id:"koin",children:[]},{value:"Robolectric",id:"robolectric",children:[]},{value:"Compilation test",id:"compilation-test",children:[]},{value:"System Extensions",id:"system-extensions",children:[{value:"System Environment",id:"system-environment",children:[]},{value:"System Property Extension",id:"system-property-extension",children:[]},{value:"System Security Manager",id:"system-security-manager",children:[]},{value:"System Exit Extensions",id:"system-exit-extensions",children:[]},{value:"No-stdout / no-stderr listeners",id:"no-stdout--no-stderr-listeners",children:[]},{value:"Locale/Timezone listeners",id:"localetimezone-listeners",children:[]},{value:"Current instant listeners",id:"current-instant-listeners",children:[]}]},{value:"JUnit Format XML Report",id:"junit-format-xml-report",children:[]},{value:"MockServer",id:"mockserver",children:[]},{value:"TestContainers",id:"testcontainers",children:[]}],c={rightToc:l};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Kotest integrates with many libraries and frameworks. This page outlines the extensions maintained by the Kotest team."),Object(a.b)("h2",{id:"allure"},"Allure"),Object(a.b)("p",null,Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"http://allure.qatools.ru"}),"Allure")," is an open-source framework designed to generate detailed and interactive test reports.\nIt works by collecting test data as tests are executed and then compiling that into a final HTML report."),Object(a.b)("p",null,"Kotest provides an extenstion for Allure and full integration instructions are ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/framework/extensions/allure"}),"here"),"."),Object(a.b)("h2",{id:"spring"},"Spring"),Object(a.b)("p",null,"Kotest offers a Spring extension that allows you to test code that wires dependencies using Spring.\nTo use this extension add the ",Object(a.b)("inlineCode",{parentName:"p"},"kotest-extensions-spring")," module to your test compile path."),Object(a.b)("p",null,"In order to let Spring know which configuration class to use, you must annotate your Spec classes with ",Object(a.b)("inlineCode",{parentName:"p"},"@ContextConfiguration"),".\nThis should point to a class annotated with the Spring ",Object(a.b)("inlineCode",{parentName:"p"},"@Configuration")," annotation. Alternatively, you can use ",Object(a.b)("inlineCode",{parentName:"p"},"@ActiveProfile")," to\npoint to a ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html"}),"specific application context file"),"."),Object(a.b)("p",null,"There are two ways to enable spring wiring depending on if you want to use constructor injection, or field injection."),Object(a.b)("h3",{id:"field-injection"},"Field Injection"),Object(a.b)("p",null,"If you wish to use field injection, then the ",Object(a.b)("inlineCode",{parentName:"p"},"SpringListener")," must be registered with any\nSpec that uses spring beans. For example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'@ContextConfiguration(classes = [(TestConfiguration::class)])\nclass SpringExampleSpec : WordSpec() {\n\n  override fun listeners() = listOf(SpringListener)\n\n  @Autowired\n  var bean: MyBean? = null\n\n  init {\n    "Spring Extension" should {\n      "have wired up the bean" {\n        bean shouldNotBe null\n      }\n    }\n  }\n}\n')),Object(a.b)("p",null,"You could add the ",Object(a.b)("inlineCode",{parentName:"p"},"SpringListener")," project wide by registering the listener in ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/framework/project-config.html"}),"ProjectConfig"),"."),Object(a.b)("h3",{id:"constructor-injection"},"Constructor Injection"),Object(a.b)("p",null,"For constructor injection, we use a different implementation called ",Object(a.b)("inlineCode",{parentName:"p"},"SpringAutowireConstructorExtension")," which\nmust be registered with ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/framework/project-config.html"}),"ProjectConfig"),". This extension will intercept each call to create a Spec instance\nand will autowire the beans declared in the primary constructor."),Object(a.b)("p",null,"First an example of the project config."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),"class ProjectConfig : AbstractProjectConfig() {\n  override fun extensions(): List<Extension> = listOf(SpringAutowireConstructorExtension)\n}\n")),Object(a.b)("p",null,"And now an example of a test class which requires a service called ",Object(a.b)("inlineCode",{parentName:"p"},"UserService")," in its primary constructor. This service\nclass is just a regular spring bean which has been annotated with @Component."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'@ContextConfiguration(classes = [(Components::class)])\nclass SpringAutowiredConstructorTest(service: UserService) : WordSpec() {\n  init {\n    "SpringListener" should {\n      "have autowired the service" {\n        service.repository.findUser().name shouldBe "system_user"\n      }\n    }\n  }\n}\n')),Object(a.b)("h3",{id:"final-clases"},"Final Clases"),Object(a.b)("p",null,"When using a final class, you may receive a warning from Kotest:"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Using SpringListener on a final class. If any Spring annotation fails to work, try making this class open")),Object(a.b)("p",null,"If you wish, you can disable this warning by setting the system property ",Object(a.b)("inlineCode",{parentName:"p"},"kotest.listener.spring.ignore.warning")," to true."),Object(a.b)("h2",{id:"ktor"},"Ktor"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"kotest-assertions-ktor")," module provides response matchers for a ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://ktor.io"}),"Ktor")," application. There are matchers\nfor both ",Object(a.b)("inlineCode",{parentName:"p"},"TestApplicationResponse")," if you are using the server side test support, and for ",Object(a.b)("inlineCode",{parentName:"p"},"HttpResponse")," if you are using the ktor\nclient classes."),Object(a.b)("p",null,"To add Ktor matchers, add the following dependency to your project"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-groovy"}),'testImplementation("io.kotest:kotest-assertions-ktor:${version}")\n')),Object(a.b)("p",null,"An example of using the matchers with the server side test support:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'withTestApplication({ module(testing = true) }) {\n   handleRequest(HttpMethod.Get, "/").apply {\n      response shouldHaveStatus HttpStatusCode.OK\n      response shouldNotHaveContent "failure"\n      response.shouldHaveHeader(name = "Authorization", value = "Bearer")\n      response.shouldNotHaveCookie(name = "Set-Cookie", cookieValue = "id=1234")\n   }\n}\n')),Object(a.b)("p",null,"And an example of using the client support:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'val client = HttpClient(CIO)\nval resp = client.post("http://mydomain.com/foo")\nresponse.shouldHaveStatus(HttpStatusCode.OK)\nresponse.shouldHaveHeader(name = "Authorization", value = "Bearer")\n\n')),Object(a.b)("h2",{id:"koin"},"Koin"),Object(a.b)("p",null,"The ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://insert-koin.io/"}),"Koin DI Framework")," can be used with Kotest through the ",Object(a.b)("inlineCode",{parentName:"p"},"KoinListener")," test listener and its own interface ",Object(a.b)("inlineCode",{parentName:"p"},"KoinTest"),"."),Object(a.b)("p",null,"To add the listener to your project, add the depency to your project:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-groovy"}),'testImplementation("io.kotest:kotest-extensions-koin:${version}")\n')),Object(a.b)("p",null,"With the dependency added, we can use Koin in our tests!"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'class KotestAndKoin : FunSpec(), KoinTest {\n\n    override fun listeners() = listOf(KoinListener(myKoinModule))\n\n    val userService by inject<UserService>()\n\n    init {\n      test("Use user service") {\n        userService.getUser().username shouldBe "Kerooker"\n      }\n    }\n\n}\n')),Object(a.b)("h2",{id:"robolectric"},"Robolectric"),Object(a.b)("p",null,Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"http://robolectric.org/"}),"Robolectric")," can be used with Kotest through the ",Object(a.b)("inlineCode",{parentName:"p"},"RobolectricExtension")," which can be found in ",Object(a.b)("inlineCode",{parentName:"p"},"kotest-extensions-robolectric")," module."),Object(a.b)("p",null,"To add this module to project you need specify following in your ",Object(a.b)("inlineCode",{parentName:"p"},"build.gradle"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-groovy"}),"testImplementation 'io.kotest:kotest-extensions-robolectric:<version>'\n")),Object(a.b)("p",null,"With this dependency added you should add extensions to your project config. For example if you have no such config yet it would look like"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),"class MyProjectLevelConfig : AbstractProjectConfig() {\n    override fun extensions(): List<Extension> = super.extensions() + RobolectricExtension()\n}\n")),Object(a.b)("p",null,"Of course you can just add this extension to another extensions you're already using."),Object(a.b)("p",null,"After that done any class which should be ran with Robolectric should be annotated with ",Object(a.b)("inlineCode",{parentName:"p"},"@RobolectricTest")," annotation."),Object(a.b)("h2",{id:"compilation-test"},"Compilation test"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"kotest-assertions-compiler")," extension provides matchers to assert that given kotlin code snippet compiles or not.\nThis extension is a wrapper over ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/tschuchortdev/kotlin-compile-testing"}),"kotlin-compile-testing")," and provides following matchers"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"String.shouldCompile()"),Object(a.b)("li",{parentName:"ul"},"String.shouldNotCompile()"),Object(a.b)("li",{parentName:"ul"},"File.shouldCompile()"),Object(a.b)("li",{parentName:"ul"},"File.shouldNotCompile()")),Object(a.b)("p",null,"To add the compilation matcher, add the following dependency to your project"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-groovy"}),'testImplementation("io.kotest:kotest-assertions-compiler:${version}")\n')),Object(a.b)("p",null,"Usage:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'    class CompilationTest: StringSpec() {\n        init {\n            "shouldCompile test" {\n                val codeSnippet = """ val aString: String = "A valid assignment" """.trimMargin()\n\n                codeSnippet.shouldCompile()\n                File("SourceFile.kt").shouldCompile()\n            }\n\n            "shouldNotCompile test" {\n                val codeSnippet = """ val aInteger: Int = "A invalid assignment" """.trimMargin()\n\n                codeSnippet.shouldNotCompile()\n                File("SourceFile.kt").shouldNotCompile()\n            }\n        }\n    }\n')),Object(a.b)("p",null,"During checking of code snippet compilation the classpath of calling process is inherited, which means any dependencies which are available in calling process will also be available while compiling the code snippet."),Object(a.b)("h2",{id:"system-extensions"},"System Extensions"),Object(a.b)("p",null,"Sometimes your code might use some functionalities straight from the JVM, which are very hard to simulate. With Kotest System Extensions, these difficulties are made easy to mock and simulate, and your code can be tested correctly. After changing the system and using the extensions, the previous state will be restored."),Object(a.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(a.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(a.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(a.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"This code is sensitive to concurrency. Due to the JVM specification there can only be one instance of these extensions running (For example: Only one Environment map must exist). If you try to run more than one instance at a time, the result is unknown."))),Object(a.b)("h3",{id:"system-environment"},"System Environment"),Object(a.b)("p",null,"With ",Object(a.b)("em",{parentName:"p"},"System Environment Extension")," you can simulate how the System Environment is behaving. That is, what you're obtaining from ",Object(a.b)("inlineCode",{parentName:"p"},"System.getenv()"),"."),Object(a.b)("p",null,"Kotest provides some extension functions that provides a System Environment in a specific scope:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'withEnvironment("FooKey", "BarValue") {\n    System.getenv("FooKey") shouldBe "BarValue" // System environment overriden!\n}\n')),Object(a.b)("p",null,"You can also use multiple values in this extension, through a map or list of pairs."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'withEnvironment(mapOf("FooKey" to "BarValue", "BarKey" to "FooValue")) {\n  // Use FooKey and BarKey\n}\n\n')),Object(a.b)("p",null,"These functions will add the keys and values if they're not currently present in the environment, and will override them if they are. Any keys untouched by the function will remain in the environment, and won't be messed with."),Object(a.b)("p",null,"Instead of extensions functions, you can also use the provided Listeners to apply these functionalities in a bigger scope. There's an alternative for the Spec/Per test level, and an alternative for the Project Level."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'\nclass MyTest : FreeSpec() {\n\n      override fun listeners() = listOf(SystemEnvironmentTestListener("foo", "bar"))\n\n    init {\n      "MyTest" {\n        System.getenv("foo") shouldBe "bar"\n      }\n    }\n\n}\n\n')),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'\nclass ProjectConfig : AbstractProjectConfig() {\n\n    override fun listeners(): List<TestListener> = listOf(SystemEnvironmentProjectListener("foo", "bar"))\n\n}\n\n')),Object(a.b)("h3",{id:"system-property-extension"},"System Property Extension"),Object(a.b)("p",null,"In the same fashion as the Environment Extensions, you can override the System Properties (",Object(a.b)("inlineCode",{parentName:"p"},"System.getProperties()"),"):"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'withSystemProperty("foo", "bar") {\n  System.getProperty("foo") shouldBe "bar"\n}\n')),Object(a.b)("p",null,"And with similar Listeners:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'    class MyTest : FreeSpec() {\n\n          override fun listeners() = listOf(SystemPropertyListener("foo", "bar"))\n\n        init {\n          "MyTest" {\n            System.getProperty("foo") shouldBe "bar"\n          }\n        }\n\n    }\n')),Object(a.b)("h3",{id:"system-security-manager"},"System Security Manager"),Object(a.b)("p",null,"Similarly, with System Security Manager you can override the System Security Manager (",Object(a.b)("inlineCode",{parentName:"p"},"System.getSecurityManager()"),")"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),"\n    withSecurityManager(myManager) {\n      // Usage of security manager\n    }\n\n")),Object(a.b)("p",null,"And the Listeners:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),"    class MyTest : FreeSpec() {\n\n              override fun listeners() = listOf(SecurityManagerListener(myManager))\n\n            init {\n              // Use my security manager\n            }\n\n        }\n")),Object(a.b)("h3",{id:"system-exit-extensions"},"System Exit Extensions"),Object(a.b)("p",null,"Sometimes you want to test that your code calls ",Object(a.b)("inlineCode",{parentName:"p"},"System.exit"),". For that you can use the ",Object(a.b)("inlineCode",{parentName:"p"},"System Exit Listeners"),". The Listener will throw an exception when the ",Object(a.b)("inlineCode",{parentName:"p"},"System.exit")," is called, allowing you to catch it and verify:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'\nclass MyTest : FreeSpec() {\n\n  override fun listeners() = listOf(SpecSystemExitListener)\n\n  init {\n    "Catch exception" {\n      val thrown: SystemExitException = shouldThrow<SystemExitException> {\n        System.exit(22)\n      }\n\n      thrown.exitCode shouldBe 22\n    }\n  }\n}\n\n')),Object(a.b)("h3",{id:"no-stdout--no-stderr-listeners"},"No-stdout / no-stderr listeners"),Object(a.b)("p",null,"Maybe you want to guarantee that you didn't leave any debug messages around, or that you're always using a Logger in your logging."),Object(a.b)("p",null,"For that, Kotest provides you with ",Object(a.b)("inlineCode",{parentName:"p"},"NoSystemOutListener")," and ",Object(a.b)("inlineCode",{parentName:"p"},"NoSystemErrListener"),". These listeners won't allow any messages to be printed straight to ",Object(a.b)("inlineCode",{parentName:"p"},"System.out")," or ",Object(a.b)("inlineCode",{parentName:"p"},"System.err"),", respectively:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),"    // In Project or in Spec\n    override fun listeners() = listOf(NoSystemOutListener, NoSystemErrListener)\n")),Object(a.b)("h3",{id:"localetimezone-listeners"},"Locale/Timezone listeners"),Object(a.b)("p",null,"Some codes use and/or are sensitive to the default Locale and default Timezone. Instead of manipulating the system defaults no your own,\nlet Kotest do it for you!"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'withDefaultLocale(Locale.FRANCE) {\n  println("My locale is now France! Tr\xe8s bien!")\n}\n\nwithDefaultTimezone(TimeZone.getTimeZone(ZoneId.of("America/Sao_Paulo"))) {\n  println("My timezone is now America/Sao_Paulo! Muito bem!")\n}\n\n')),Object(a.b)("p",null,"And with the listeners"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'  // In Project or in Spec\n  override fun listeners() = listOf(\n    LocaleTestListener(Locale.FRANCE),\n    TimeZoneTestListener(TimeZone.getTimeZone(ZoneId.of("America/Sao_Paulo")))\n  )\n\n')),Object(a.b)("h3",{id:"current-instant-listeners"},"Current instant listeners"),Object(a.b)("p",null,"Sometimes you may want to use the ",Object(a.b)("inlineCode",{parentName:"p"},"now")," static functions located in ",Object(a.b)("inlineCode",{parentName:"p"},"java.time")," classes for multiple reasons, such as setting the creation date of an entity"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"data class MyEntity(creationDate: LocalDateTime = LocalDateTime.now())"),"."),Object(a.b)("p",null,"But what to do when you want to test that value? ",Object(a.b)("inlineCode",{parentName:"p"},"now")," will be different\neach time you call it!"),Object(a.b)("p",null,"For that, Kotest provides ",Object(a.b)("inlineCode",{parentName:"p"},"ConstantNowListener")," and ",Object(a.b)("inlineCode",{parentName:"p"},"withConstantNow")," functions."),Object(a.b)("p",null,"While executing your code, your ",Object(a.b)("inlineCode",{parentName:"p"},"now")," will always be the value that you want to test against."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),"val foreverNow = LocalDateTime.now()\n\nwithConstantNow(foreverNow) {\n  LocalDateTime.now() shouldBe foreverNow\n  delay(10) // Code is taking a small amount of time to execute, but `now` changed!\n  LocalDateTime.now() shouldBe foreverNow\n}\n\n")),Object(a.b)("p",null,"Or, with a listener for all the tests:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),"  override fun listeners() = listOf(\n    ConstantNowTestListener(foreverNow)\n  )\n")),Object(a.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(a.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(o.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(o.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(a.b)("path",Object(o.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(a.b)("div",Object(o.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},Object(a.b)("inlineCode",{parentName:"p"},"withContantNow")," and ",Object(a.b)("inlineCode",{parentName:"p"},"ConstantNowTestListener")," are very sensitive to race conditions. Using them, mocks the static method ",Object(a.b)("inlineCode",{parentName:"p"},"now")," which is global to the whole JVM instance,\nif you're using it while running test in parallel, the results may be inconsistent."))),Object(a.b)("h2",{id:"junit-format-xml-report"},"JUnit Format XML Report"),Object(a.b)("p",null,"JUnit includes an XML report generator that it calls the ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://junit.org/junit5/docs/5.5.0-RC2/api/org/junit/platform/reporting/legacy/xml/LegacyXmlReportGeneratingListener.html"}),"legacy xml report"),". Many tools integrate with this format so it is very useful.\nHowever, this report has no concept of nesting tests. Therefore when used with a nested ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/framework/testing-styles.html"}),"test style")," in Kotest, it will include parent tests as orphans."),Object(a.b)("p",null,"To solve this, Kotest has it's own ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/framework/extensions/junit_xml"}),"implementation of the same format"),", that is configurable on whether to include parent tests and/or collapse the names."),Object(a.b)("h2",{id:"mockserver"},"MockServer"),Object(a.b)("p",null,"Kotest provides an extension for integration with the ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://www.mock-server.com"}),"MockServer")," library through the ",Object(a.b)("inlineCode",{parentName:"p"},"kotest-extensions-mockserver")," module."),Object(a.b)("p",null,"MockServer is described as an in process server that returns specific responses for different requests via HTTP or HTTPS.\nWhen MockServer receives a request it matches that request against the configured expectations. If a match is found it returns that response, otherwise a 404 is returned."),Object(a.b)("p",null,"Read ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/framework/extensions/mockserver"}),"full instructions here"),"."),Object(a.b)("h2",{id:"testcontainers"},"TestContainers"),Object(a.b)("p",null,Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/testcontainers/testcontainers-java"}),"testcontainers-java")," library that provide lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"kotest-extensions-testcontainers")," provides integration for using testcontainers-java with kotest."),Object(a.b)("p",null,"For using ",Object(a.b)("inlineCode",{parentName:"p"},"kotest-extensions-testcontainers")," add the below dependency in your build file."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-groovy"}),'testImplementation("io.kotest:kotest-extensions-testcontainers:${version}")\n')),Object(a.b)("p",null,"Having this dependency in test classpath brings in extension method's in scope which let you convert any Startable such as a DockerContainer into a kotest TestListener, which you can register with Kotest and then Kotest will manage lifecycle of container for you."),Object(a.b)("p",null,"For example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-kotlin"}),'\nclass DatabaseRepositoryTest : FunSpec({\n   val redisContainer = GenericContainer<Nothing>("redis:5.0.3-alpine")\n   listener(redisContainer.perTest()) //converts container to listener and registering it with Kotest.\n\n   test("some test which assume to have redis container running") {\n      //\n   }\n})\n')),Object(a.b)("p",null,"In above example ",Object(a.b)("inlineCode",{parentName:"p"},"perTest()")," extension method converts the container into a ",Object(a.b)("inlineCode",{parentName:"p"},"TestListener")," which start's the\nredis container before each test and stop's that after test. Similarly if you want to reuse the container for all tests\nin a single spec class you can use ",Object(a.b)("inlineCode",{parentName:"p"},"perSpec()")," extension method which convert's container into a ",Object(a.b)("inlineCode",{parentName:"p"},"TestListener"),"\nwhich start's the container before running any test in spec and stop's that after all tests, thus a single container is\nused by all tests in spec class."))}p.isMDXComponent=!0}}]);